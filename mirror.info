
Typical sequence

1 - Verify local file ; remove if failed
2 - If local file does not exists , download
2.1 - Verify downloaded file (might be temp) ; remove and exit if failed [continue instead of exit if multichoice]
2.2 - If downloaded as temp, rename
3 - [ The name of the local file must be returned if multichoice]


0) Read configuration
   two sections :  common and release specific (codename/version at least)

1) Instantiate proper repository object
   exception if no destination directory

2) download master file(s). Might return nothing if local copies are verifiable and up-to-date
   performs verification (gpg)
      if verification does not succeed (or impossible), remove local version
      if succeed, return 
2.1) Download fresh release file (either missing or failed-verify)
2.2) Verify signature
   exit if failing (this is last resort verification)
   verify options (mainly codename), exiting under problems

3) Create the local tree
   move metadata files into tree
   issue message (if non quiet)

4) Get list of files to download iterating over subrepos

  5.1) Verify md5 of Packages*
       remove if failed (continue with next if OK?)
  5.2) DownloadReplace & verify Packages*
       if fails, _exit_ [raise exception??], and remove localcopy
   
5) Filter package list, with minor filters

6) Download packages
  Verify destination, and download if does not exist or fails


NOTE : Steps 2, 4 & 6 correspond to the three mirroging stages : metadata, filelist, packages

-----

Debian vs. Fedora/Yum

* Fedora has neither pgp nor other verification methods for main file (repomd.xml)
* There are no components in fedora. The equivalent are the additional repositories (extras for fedora core, epel for RedHat/CentOS, ...)
* Fedora requires at least two repositories, one for base system and another one for updates

* Fedora has a comps.xml that could be useful, but is only present on base repository, not in updates

