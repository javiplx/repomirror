#!/usr/bin/python

import os , sys

import repolib


def usage ( progname , msg=None ) :
    outstr = []
    if msg : outstr.append( msg )
    outstr.append( "Usage : %s repo_name" % os.path.basename( progname ) )
    return "\n".join( outstr )


if sys.argv[1:] :
    if len(sys.argv) > 2 :
        repolib.logger.critical( usage( sys.argv[0] , "Too many arguments" ) )
        sys.exit(2)
else :
    repolib.logger.critical( usage( sys.argv[0] ) )
    sys.exit(1)


repo_name = sys.argv[1]


try :
    repo = repolib.MirrorRepository.new( repo_name )
except Exception , ex :
    repolib.logger.critical( "Exception during repo instantiation : %s" % ex )
    sys.exit(255)

if not os.path.isdir( repo.destdir ) :
    repolib.logger.critical( "Destination directory '%s' does not exits" % repo.destdir )
    sys.exit(2)


meta_files = repo.get_metafile()

if meta_files.values().count( False ) == len(meta_files) :
    repolib.logger.critical( "No valid metadata files found, exiting" )
    sys.exit(255)

if meta_files.values().count( True ) == len(meta_files) :
    repolib.logger.info( "Updated repository, no processing required" )
    sys.exit(0)


# After verify all the mirroring parameters, it is safe to create directory tree
repo.build_local_tree()


# Once created, we move in the primary metadata file
local_repodata = repo.write_master_file( meta_files )


# repolib.logger.setLevel( repolib.logging.INFO )
map( repolib.logger.info , repo.info( local_repodata ).split("\n") )


for subrepo in repo.subrepos :
    repolib.logger.info( "Getting metafiles for %s" % ( subrepo , ) )
    subrepo.get_metafile( local_repodata )

