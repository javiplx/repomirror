#!/usr/bin/python

import repolib
import os , sys

usage = "Usage : %s repo_name subrepo" % os.path.basename( sys.argv[0] )

if sys.argv[1:] :
    if len(sys.argv) != 3 :
        print usage
        sys.exit(2)
    repo_name , subrepo = sys.argv[1:3]
    if subrepo.find(',') != -1 :
        subrepo = tuple(subrepo.split(','))
else :
    print usage
    sys.exit(1)

try :
    repo = repolib.MirrorRepository.new( repo_name )
    _subrepo = repo.select_component( subrepo )
    repo.mode = "update"
except Exception , ex :
    repolib.logger.critical( "Repo %s : %s" % ( repo_name , ex ) )
    sys.exit(255)


def purge ( filesdict ) :
    for subrepo in filesdict.keys() :
        file = filesdict[subrepo]
        if not isinstance(file,bool) :
            os.unlink( file )
            filesdict.pop( subrepo )


meta_files = repo.get_metafile( keep=True )

msg = "Outdated subrepo"
retcode = 1

if meta_files[ _subrepo ] is True :
    msg = "Subrepo is up to date"
    retcode = 0

if retcode and _subrepo.get_metafile( meta_files , download=False ) :
    msg = "Subrepo is up to date"
    retcode = 0

purge( meta_files )

print msg
sys.exit(retcode)

