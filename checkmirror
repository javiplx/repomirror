#!/usr/bin/python

import repolib
import os , sys

usage = "Usage : %s repo_name subrepo" % os.path.basename( sys.argv[0] )

if sys.argv[1:] :
    if len(sys.argv) != 3 :
        print usage
        sys.exit(2)
    repo_name , subrepo = sys.argv[1:3]
    if subrepo.find(',') != -1 :
        subrepo = tuple(subrepo.split(','))
else :
    print usage
    sys.exit(1)

try :
    repo = repolib.MirrorRepository.new( repo_name )
except Exception , ex :
    print "Exception : %s" % ex
    sys.exit(255)

if not subrepo in repo.get_subrepos() :
    print "Specified subrepo %s does not exists" % ( subrepo, )
    sys.exit(255)

def purge ( filesdict ) :
    for subrepo in filesdict.keys() :
        file = filesdict[subrepo]
        if file :
            os.unlink( file )
            filesdict.pop( subrepo )


repo.mode = "update"

meta_files = repo.get_master_file( {} , True )

msg = "Outdated subrepo"
retcode = 1

if meta_files.get('') is True :
    msg = "Subrepo is up to date"
    retcode = 0

if retcode and repo.check_packages_file( subrepo , meta_files , {} , False ) :
    msg = "Subrepo is up to date"
    retcode = 0

purge( meta_files )

print msg
sys.exit(retcode)

