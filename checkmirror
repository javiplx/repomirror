#!/usr/bin/python

import repolib
import os , sys

if sys.argv[1:] :
    if len(sys.argv) > 2 :
        print "Too many arguments"
        print "Usage : %s repo_name" % os.path.basename( sys.argv[0] )
        sys.exit(2)
    repo_name = sys.argv[1]
else :
    print "Usage : %s repo_name" % os.path.basename( sys.argv[0] )
    sys.exit(1)

try :
    repo = repolib.MirrorRepository.new( repo_name )
except Exception , ex :
    print "Exception : %s" % ex
    sys.exit(255)


def purge ( filesdict ) :
    for subrepo in filesdict.keys() :
        file = filesdict[subrepo]
        if file :
            os.unlink( file )
            filesdict.pop( subrepo )


repo.mode = "update"

meta_files = repo.get_master_file( {} , True )

if meta_files.get('') is True :
    sys.exit(0)

outdated = []
for subrepo in repo.get_subrepos() :
    if not repo.check_packages_file( subrepo , meta_files , {} , False ) :
        outdated.append( "%s" % ( subrepo ,) )
        repolib.logger.error( "%s is outdated" % ( subrepo ,) )

purge( meta_files )

repolib.logger.warning( "Mirando IV  %s" % meta_files )

if not outdated :
    sys.exit(0)

print "Outdated repositories :\n\t%s" % "\n\t".join( outdated )
sys.exit(1)

