#!/usr/bin/python

# FIXME : Allow reading from a sources.list file, parsing into scheme, server, path, codename and components

params = {}


import os , sys


import repolib

if sys.argv[1:] :
    if len(sys.argv) > 2 :
        print "Too many arguments"
        print "Usage : %s repo_name" % os.path.basename( sys.argv[0] )
        sys.exit(2)
    repo_name = sys.argv[1]
else :
    print "Usage : %s repo_name" % os.path.basename( sys.argv[0] )
    sys.exit(1)

try :
    repo = repolib.MirrorRepository.new( repo_name )
except Exception , ex :
    print "Exception : %s" % ex
    sys.exit(255)

if not os.path.isdir( repo.destdir ) :
    print "Destination directory '%s' does not exits" % repo.destdir
    sys.exit(2)


meta_files = repo.get_master_file( params )

# FIXME : debian - identify error from updated repositories
# FIXME : yum - only errors produce empty output
if not meta_files :
    print "Cannot process, exiting"
    sys.exit(255)

# After verify all the mirroring parameters, it is safe to create directory tree

repo.build_local_tree()

# Once created, we move in the primary metadata file

local_repodata = repo.write_master_file( meta_files )

repolib.logger.setLevel( repolib.logging.INFO )

map( repolib.logger.info , repo.info( local_repodata ).split("\n") )


download_pkgs = repo.get_download_list()
download_size = 0
missing_pkgs = []

for subrepo in repo.get_subrepos() :

    repolib.logger.info( "Scanning %s" % ( subrepo , ) )

    _size , _pkgs , _missing = repo.get_package_list( subrepo , local_repodata , params , repo.filters )
    download_size += _size
    download_pkgs.extend( _pkgs )
    missing_pkgs.extend( _missing )


_size = download_size / 1024 / 1024
if _size > 2048 :
    repolib.logger.info( "Total size to download : %.1f Gb" % ( _size / 1024 ) )
else :
    repolib.logger.info( "Total size to download : %.1f Mb" % _size )

if missing_pkgs :

    _missing = {}
    for pkg in missing_pkgs :
        _missing[ pkg ] = 1

    found_pkgs = {}
    download_pkgs.rewind()
    for pkg in download_pkgs :
        # NOTE : We don't break the loop to ensure we get all the available archs
        if pkg['name'] in _missing.keys() :
            # print "FOUND %s %s" % ( pkg['name'] , pkg )
            found_pkgs[ pkg['name'] ] = pkg
    # NOTE : extending here is safer
    download_pkgs.extend( found_pkgs.values() )

    missing = []
    for pkg in _missing.keys() :
        if not pkg in found_pkgs.keys() :
            missing.append( pkg )
    if missing :
        repolib.logger.info( "There are %d missing requirements" % len(missing) )

download_pkgs.start()
download_pkgs.finish()

